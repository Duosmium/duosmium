const { EleventyServerless } = require("@11ty/eleventy");

// Explicit dependencies for the bundler from config file and global data.
// The file is generated by the Eleventy Serverless Bundler Plugin.
require("./eleventy-bundler-modules.js");

const chromium = require("@sparticuz/chrome-aws-lambda");

async function handler(event) {
  let elev = new EleventyServerless("screenshot", {
    path: new URL(event.rawUrl).pathname,
    query: event.queryStringParameters,
    functionsDir: "./serverless/",
  });

  try {
    let [output] = await elev.getOutput();

    const browser = await chromium.puppeteer.launch({
      executablePath: await chromium.executablePath,
      args: chromium.args,
      defaultViewport: {
        width: output.data.dimensions[0],
        height: output.data.dimensions[1],
        deviceScaleFactor: 1,
      },
      headless: chromium.headless,
    });
    const page = await browser.newPage();
    page.setJavaScriptEnabled(true);

    const timeout = 8500; // 8.5 seconds, netlify function timeout is 10 sec
    let response = await Promise.race([
      page.setContent(output.content, {
        timeout,
        waitUntil: ["load"],
      }),
      new Promise((res) => {
        setTimeout(() => {
          res(false);
        }, timeout - 1500);
      }),
    ]);

    if (response === false) {
      await page.evaluate(() => window.stop());
    }

    const screenshot = await page.screenshot({
      type: "png",
      encoding: "base64",
      fullPage: false,
      captureBeyondViewport: false,
      clip: {
        x: 0,
        y: 0,
        width: output.data.dimensions[0],
        height: output.data.dimensions[1],
      },
    });

    await browser.close();

    return {
      statusCode: 200,
      headers: {
        "Content-Type": "text/png",
      },
      body: screenshot,
      isBase64Encoded: true,
    };
  } catch (error) {
    // Only console log for matching serverless paths
    // (otherwise you’ll see a bunch of BrowserSync 404s for non-dynamic URLs during --serve)
    if (elev.isServerlessUrl(event.path)) {
      console.log("Serverless Error:", error);
    }

    return {
      statusCode: error.httpStatusCode || 500,
      body: JSON.stringify(
        {
          error: error.message,
        },
        null,
        2
      ),
    };
  }
}

// Choose one:
// * Runs on each request: AWS Lambda, Netlify Function
// * Runs on first request only: Netlify On-demand Builder
//    1. Don’t forget to `npm install @netlify/functions`
//    2. Also use `redirects: "netlify-toml-builders"` in your config file’s serverless bundler options:
//       https://www.11ty.dev/docs/plugins/serverless/#bundler-options

// exports.handler = handler;

const { builder } = require("@netlify/functions");
exports.handler = builder(handler);
