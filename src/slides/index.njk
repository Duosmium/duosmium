---
title: Generate Slides | Duosmium Results
description: Generate awards slides from SciolyFF.

layout: base.njk
---
<style>
    *,
    *:after,
    *:before {
        box-sizing: border-box;
    }
    body,
    html {
        font-family: Roboto, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;
        margin: 0;
        padding: 0;
        height: 100%;
    }
    div#subway {
        height: 100%;
    }
    main {
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: row;
        height: 100%;
    }
    div#editor {
        width: 50%;
        max-width: 600px;
        display: flex;
        flex-direction: column;
    }
    div.topbar {
        color: #f5f5f5;
        background-color: #1f1b35;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
    }
    div.topbar {
        padding: 12px 20px;
        justify-content: space-between;
    }
    .space-inside * + * {
        margin-left: 8px;
    }
    .bold {
        font-weight: 500;
    }
    .topbar h1 {
        margin: 4px 3rem 4px 0;
        padding: 0 0 0 6px;
        white-space: nowrap;
        font-size: 2rem;
        font-weight: 500;
    }

    .settings {
        padding: 20px;
        flex: 1;
        overflow: scroll;
        background-color: #f5f5f5;
    }
    .settings > details {
        margin-bottom: 20px;
    }
    .settings summary {
        cursor: pointer;
        font-weight: 500;
    }
    .settings label {
        display: block;
    }
    .settings details label {
        margin: 6px 0;
    }
    .settings input[type="number"] {
        width: 64px;
    }
    .settings input[type="color"] {
        height: 2em;
        border: none;
    }

    textarea {
        height: 320px;
        width: 100%;
        margin: 8px;
        border: 2px solid #ccc;
        resize: none;
        padding: 1em;
        background-color: inherit;
        overscroll-behavior: none;
    }
    iframe {
        border: none;
        flex-grow: 1;
    }
    div#toggle {
        display: none;
    }
    .flex {
        display: flex;
        flex-direction: row;
        align-items: center;
    }
    span {
        margin: 0 6px;
    }
    span.selected {
        text-decoration: underline;
        font-weight: bold;
    }
    @media (max-width: 640px) {
        div#subway {
            width: 100vw;
            overflow: hidden;
        }
        main {
            width: 200vw;
            height: calc(100% - 4em);
        }
        div#toggle {
            background-color: #ddd;
            display: block;
            height: 4em;
            position: fixed;
            width: 100%;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        }
        div#toggle > span {
            margin: 1em;
        }
    }
    input.toggle[type="checkbox"] {
        height: 0;
        width: 0;
        visibility: hidden;
    }

    label.toggle {
        cursor: pointer;
        text-indent: -9999px;
        width: 60px;
        height: 34px;
        background: #2dd4bf;
        display: block;
        border-radius: 34px;
        position: relative;
    }

    label.toggle:after {
        content: "";
        position: absolute;
        top: 4px;
        left: 4px;
        width: 26px;
        height: 26px;
        background: #fff;
        border-radius: 50%;
        transition: 0.4s;
    }

    input.toggle:checked + label.toggle {
        background: #22d3ee;
    }

    input.toggle:checked + label.toggle:after {
        left: calc(100% - 5px);
        transform: translateX(-100%);
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        margin: -1px;
        padding: 0;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
</style>
<div id="subway">
    <main>
        <div id="editor">
            <div class="topbar">
                <h1>Generate Slides</h1>
            </div>
            <div class="settings">
                <details open>
                    <summary>Settings</summary>
                    {% set simpleColorOptions = {
                        themeBgColor: [
                            "Theme Background Color", "#1f1b35"
                        ],
                        themeTextColor: ["Theme Text Color", "#f5f5f5"]
                    } %}
                    {% set advColorOptions = {
                        headerTextColor: [
                            "Header Text Color", "#353535"
                        ],
                        textColor: [
                            "Text Color", "#212121"
                        ],
                        bgColor: ["Background Color", "#fafafa"]
                    } %}
                    {% set advNumberOptions = {
                        titleFontSize: [
                            "Title Font Size", 48
                        ],
                        headerFontSize: [
                            "Header Font Size", 32
                        ],
                        sidebarFontSize: [
                            "Sidebar Font Size", 16
                        ],
                        sidebarLineHeight: [
                            "Sidebar Line Height", 0.5
                        ],
                        teamFontSize: [
                            "Team Font Size", 36
                        ],
                        teamLineHeight: [
                            "Team Line Height", 1.25
                        ],
                        dividerOffset: ["Divider Offset", 10]
                    } %}

                    {% for id, value in simpleColorOptions %}
                        <label>
                            {{ value[0] }}:
                            <input type="color" id="{{ id }}" value="{{ value[1] }}"/>
                        </label>
                    {% endfor %}
                    <details>
                        <summary>Advanced</summary>
                        {% for id, value in advColorOptions %}
                            <label>
                                {{ value[0] }}:
                            <input type="color" id="{{ id }}" value="{{ value[1] }}"/>
                            </label>
                        {% endfor %}
                        {% for id, value in advNumberOptions %}
                            <label>
                                {{ value[0] }}:
                            <input type="number" id="{{ id }}" value="{{ value[1] }}"/>
                            </label>
                        {% endfor %}
                        <label>Shuffle Event Order:
                            <input type="checkbox" id="randomOrder"/>
                        </label>
                    </details>
                </details>
                <label>
                    <span class="bold">SciolyFF 1:</span>
                    <textarea id="input-text-1">
Tournament:
  level: Nationals
  location: Zoom University
  division: C
  year: 2020
  date: 2020-04-01

Events:
- name: Disease Detectives
- name: Dynamic Planet

Teams:
- school: The Best Around
  number: 1
  state: AK
- school: The Greatest Around
  number: 2
  state: HI

Placings:
- event: Disease Detectives
  team: 1
  raw:
    score: -1.0
    tier: 2
- event: Disease Detectives
  team: 2
  raw:
    score: -10.0
- event: Dynamic Planet
  team: 1
  raw:
    score: 100.0
- event: Dynamic Planet
  team: 2
  participated: false
</textarea
        >
                </label>
                <label>
                    <span class="bold">SciolyFF 2 (optional, for B/C tournaments):</span>
                    <textarea id="input-text-2"></textarea
        >
                </label>
            </div>
        </div>
        <iframe id="pdf-output" title="PDF output"></iframe>
    </main>
    <div id="toggle">
        <span id="input-label" class="selected">Input</span>
        <input type="checkbox" class="toggle" id="switch" autocomplete="off"/>
        <label class="toggle" for="switch">Preview toggle</label>
        <span id="output-label">Output</span>
    </div>
</div>

<script src="/slides/assets/gen.js"></script>
<script>
    (() => {
        // allow jquery-like element selection
        const qs = (selector) => document.querySelector(selector);

        let defaultColor;

        // function for updating iframe content
        const setIframe = () => {
            qs("#pdf-output").srcdoc = "Loading...";
            qs("#pdf-output").src = window.generatePdf(qs("#input-text-1").value, qs("#input-text-2").value, {
                sidebarLineHeight: parseFloat(qs("#sidebarLineHeight").value),
                dividerOffset: parseInt(qs("#dividerOffset").value),
                titleFontSize: parseInt(qs("#titleFontSize").value),
                headerFontSize: parseInt(qs("#headerFontSize").value),
                sidebarFontSize: parseInt(qs("#sidebarFontSize").value),
                teamFontSize: parseInt(qs("#teamFontSize").value),
                teamLineHeight: parseFloat(qs("#teamLineHeight").value),
                bgColor: qs("#bgColor").value,
                textColor: qs("#textColor").value,
                themeBgColor: qs("#themeBgColor").value,
                themeTextColor: qs("#themeTextColor").value,
                headerTextColor: qs("#headerTextColor").value,
                randomOrder: qs("#randomOrder").checked
            });

            qs("#pdf-output").removeAttribute("srcdoc")
        };
        setIframe();

        // load initial data from file if "from" query parameter provided
        const params = new URLSearchParams(window.location.search);
        const links = params.getAll("from");
        if (links.length > 0) {
            links
                .slice(0, 2)
                .forEach((url, i) => {
                    fetch(url, {
                        credentials: "omit",
                        referrerPolicy: "no-referrer"
                    })
                        .then((resp) => {
                            return resp.text();
                        })
                        .then((text) => {
                            if (text) {
                                defaultColor = window.getColor(text)
                                qs("#themeBgColor").value = defaultColor;
                                qs(`#input-text-${i + 1}`).value = text;
                                setIframe();
                            }
                        });
                });

        }

        // update iframe when options are changed
        [
            "sidebarLineHeight",
            "dividerOffset",
            "titleFontSize",
            "headerFontSize",
            "sidebarFontSize",
            "teamFontSize",
            "teamLineHeight",
            "bgColor",
            "textColor",
            "themeBgColor",
            "themeTextColor",
            "headerTextColor",
            "randomOrder"
        ].forEach((id) => {
            qs(`#${id}`).addEventListener("change", setIframe);
        });

        // debounce editor input to avoid spamming the endpoint
        let timeout;
        const debounceEditor = (id) => () => {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                const newColor = window.getColor(qs(id).value);
                if (newColor !== defaultColor) {
                    qs("#themeBgColor").value = newColor;
                    defaultColor = newColor;
                }
                setIframe();
            }, 500);
        };
        qs("#input-text-1").addEventListener("input", debounceEditor("#input-text-1"));
        qs("#input-text-2").addEventListener("input", debounceEditor("#input-text-2"));

        // input/output view switch, only available on smaller screens
        qs("#switch").addEventListener("input", (e) => {
            // highlight selected labels
            if (e.target.checked) {
                qs("#output-label")
                    .classList
                    .add("selected");
                qs("#input-label")
                    .classList
                    .remove("selected");
                // actually change the thing
                qs("#subway").scrollLeft = 1000;
            } else {
                qs("#output-label")
                    .classList
                    .remove("selected");
                qs("#input-label")
                    .classList
                    .add("selected");
                qs("#subway").scrollLeft = 0;
            }
        });
    })();
</script>