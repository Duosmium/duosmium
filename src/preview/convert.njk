---
title: CSV to SciolyFF | Duosmium Results
description: Convert a CSV to the SciolyFF file format.

layout: base.njk
---

<style>
  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }
  body,
  html {
    font-family: Roboto, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    height: 100%;
    padding: 8px 16px;
    margin: auto;
    line-height: 1.5;
    font-size: 1.05em;
  }
  label:first-of-type {
    display: flex;
    align-items: center;
    margin-bottom: 18px;
  }
  label .title {
    font-weight: 500;
    font-size: 1.1rem;
    margin-right: 8px;
  }
  label .info {
    font-size: 1rem;
    font-weight: 300;
    margin: 2px 0 6px;
  }
  #csv-url {
    width: min(60ch, 100%);
    padding: 6px 8px;
    margin: 6px 0;
  }
  button,
  input[type="file"]::file-selector-button {
    padding: 7px 9px;
    margin: 6px 0;
    background-color: transparent;
    border: 1px solid #777;
    border-radius: 4px;
    cursor: pointer;
  }
  button:hover,
  input[type="file"]::file-selector-button:hover {
    border-color: #333;
  }
  input[type="file"]::file-selector-button {
    margin-right: 4px;
  }
  h2 {
    margin: 0 16px 0 0;
  }
  #download {
    margin-right: 8px;
  }
  .flex {
    display: flex;
    align-items: center;
    margin: 20px 0 8px;
  }
</style>

<main>
  <h1>CSV to SciolyFF Conversion</h1>
  <label>
    <span class="title">From local file:</span>
    <input type="file" id="csv-file" accept=".csv"/>
  </label>
  <label>
    <div class="title">From Google Sheets:</div>
    <div class="info">
      (Copy the link while viewing the "CSV Output" sheet, including the "gid"
      in the URL. Make sure the Google Sheet has link sharing ON.)
    </div>
    <input
      type="url"
      id="csv-url"
      placeholder="https://docs.google.com/spreadsheets/d/.../edit#gid=..."
/>
  </label>
  <button id="csv-convert" type="button">Convert</button>

  <br>

  <label>
    Mark Ties (uncheck this to check for unintentional ties):
    <input type="checkbox" id="mark-ties" checked/>
  </label>

  <div class="flex">
    <h2>Output</h2>
    <button id="download" type="button">Download</button>
    <button id="send" type="button" hidden>Send to Previewer</button>
  </div>
  <pre id="output"></pre>
</main>

<script src="/preview/assets/convert.js"></script>
<script>
  (() => {
    // allow jquery-like element selection
    const qs = (selector) => document.querySelector(selector);

    let csvText = ""

    qs("#csv-file").addEventListener("change", (e) => {
      if (e.target.files.length === 0) {
        return;
      }
      qs("#output").innerText = "Loading from file...";
      const file = e
        .target
        .files[0];
      file
        .text()
        .then((text) => {
          if (text) {
            setOutput(text);
          }
        });
    });

    qs("#csv-convert").addEventListener("click", () => {
      const sheetUrlRegex = /https:\/\/docs.google.com\/spreadsheets\/d\/(?<id>[\w-]+)\/edit(?:\?[\w=]+)?\#gid=(?<gid>\w+)/;
      if (!sheetUrlRegex.test(qs("#csv-url").value)) {
        qs("#output").innerText = "Invalid URL";
        return;
      }
      qs("#output").innerText = "Loading from URL...";

      const {id, gid} = sheetUrlRegex
        .exec(qs("#csv-url").value)
        .groups;
      fetch(`https://docs.google.com/spreadsheets/d/${id}/export?format=csv&gid=${gid}`)
        .then((response) => {
          if (response.status === 200) {
            return response.text();
          }
          qs("#output").innerText = "Error while fetching URL: " + response.statusText + "\nDouble check your URL and try again.";
          return Promise.resolve(false);
        })
        .then((data) => {
          if (data) {
            setOutput(data);
          }
        });
    });

    // if we are in an iframe, enable sending data to parent
    if (window.parent !== window) {
      qs("#download").hidden = true;
      qs("#send").hidden = false;
    }

    qs("#send").addEventListener("click", () => {
      const data = qs("#output").innerText;
      if (!data.includes("Tournament:")) {
        qs("#output").innerText = "No data to send!";
        setTimeout(() => {
          qs("#output").innerText = "";
        }, 5000);
        return;
      }
      window
        .parent
        .postMessage({
          source: "sciolyff-convert",
          converted: data
        }, location.origin);
    });

    qs("#download").addEventListener("click", () => {
      if (!qs("#output").innerText.includes("Tournament:")) {
        qs("#output").innerText = "No data to download!";
        setTimeout(() => {
          qs("#output").innerText = "";
        }, 5000);
        return;
      }
      fetch("/preview/meta/", {
        method: "POST",
        body: JSON.stringify({rep: qs("#output").innerText})
      })
        .then((response) => {
          if (response.status === 200) 
            return response.json();
          return Promise.resolve({name: "sciolyff"});
        })
        .then((meta) => {
          let url = URL.createObjectURL(new Blob([qs("#output").innerText], {type: "text/plain"}));
          const a = document.createElement("a");
          a.href = url;
          a.download = meta
            .name
            .trim() + ".yaml";
          a.hidden = true;
          document
            .body
            .appendChild(a);
          a.click();
          a.remove();
          URL.revokeObjectURL(url);
        });
    });

    qs("#mark-ties").addEventListener("change", () => {
      if (csvText) {
        setOutput(csvText);
      }
    });

    function setOutput(csvFile) {
      csvText = csvFile;
      try {
        qs("#output").innerText = csvToSciolyFF(csvFile, qs("#mark-ties").checked);
      } catch (e) {
        qs("#output").innerText = e.message;
      }
    }
  })();
</script>
